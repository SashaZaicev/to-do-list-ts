{"version":3,"sources":["serviceWorker.ts","api/api.ts","state/tasks-reduser.ts","state/todolists-reduser.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","headers","baseURL","todolistsAPI","get","then","res","title","post","tasksAPI","todolistId","taskTitle","taskId","delete","model","put","initialState","actionTaskC","type","task","tasks","todoId","updateTaskTC","domainModel","dispatch","getState","find","t","id","apiModel","deadline","description","priority","startDate","status","action","console","warn","actionTodoC","filter","todolist","todolists","rootReducer","combineReducers","state","stateCopy","filteredTasks","newTask","todoListId","newTasks","map","forEach","tl","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","error","setError","addTask","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","event","charCode","variant","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","changeTitleHandler","useCallback","autoFocus","onBlur","onDoubleClick","Task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onChangeTitleHandler","newValue","changeTaskTitle","key","className","Checkbox","removeTask","Delete","style","TodoList","useDispatch","useEffect","data","items","fetchTasksTC","log","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","Button","App","useSelector","removeTaskTC","item","addTaskTC","addTodolist","addTodolistTC","newTitle","changeStatus","AppBar","position","Toolbar","edge","arial-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.314d6673.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"39f6779d-eaae-4bd7-8915-a34646e60614\"\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/'\r\n})\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodoLists() {\r\n        return instance.get<Array<TodoListType>>('todo-lists')\r\n            .then((res) => {\r\n                return (res)\r\n            })\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{item: TodoListType}>>('todo-lists', {title: title})\r\n            // .then((res) => {\r\n            //     return (res.data)\r\n            // })\r\n    },\r\n    deleteTodoList(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n            .then((res) => {\r\n                return (res.data)\r\n            })\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n            .then((res) => {\r\n                return (res.data)\r\n            })\r\n    }\r\n}\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n            // .then((res) => {\r\n            //     return (res.data)\r\n            // })\r\n    },\r\n    createTask(taskTitle: string, todolistId: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n            // .then((res) => {\r\n            //     return (res.data)\r\n            // })\r\n    },\r\n    deleteTask(taskId: string, todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n            // .then((res) => {\r\n            //     return (res)\r\n            // })\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n       //patch будет работать когда сделают на сервере\r\n       //  instance.patch<UpdateTaskModelType>(`todo-lists/${todolistId}/tasks/${taskId}`, {model: model})\r\n      return  instance.put<UpdateTaskModelType>(`todo-lists/${todolistId}/tasks/${taskId}`, {model: model})\r\n            // .then((res) => {\r\n            //     return (res.data)\r\n            // })\r\n    }\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reduser\";\r\nimport {tasksAPI, TaskType, TaskStatuses, TaskPriorities, UpdateTaskModelType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\n// const REMOVE_TASK = 'REMOVE-TASK';\r\n// const CHANGE_TASK_STATUS = 'CHANGE-TASK-STATUS';\r\n// const ADD_TASK = 'ADD-TASK';\r\n// const CHANGE_TASK_TITLE = 'CHANGE-TASK-TITLE';\r\n\r\n// export type RemoveTaskACType = {\r\n//     type: 'REMOVE-TASK'\r\n//     taskId: string\r\n//     todolistId: string\r\n// }\r\n// export type AddTaskACType = {\r\n//     type: 'ADD-TASK'\r\n//     task: TaskType\r\n//     todolistId: string\r\n//     title: string\r\n// }\r\n// export type ChangeTaskStatusACType = {\r\n//     type: 'CHANGE-TASK-STATUS'\r\n//     taskId: string,\r\n//     status: number,\r\n//     todolistId: string\r\n// }\r\n// export type ChangeTaskTitleACType = {\r\n//     type: 'CHANGE-TASK-TITLE'\r\n//     id: string,\r\n//     title: string,\r\n//     todolistId: string\r\n// }\r\n// export type SetTasksActionType = {\r\n//     type: 'SET-TASKS'\r\n//     tasks: Array<TaskType>\r\n//     todoId: string\r\n// }\r\n\r\n// type ActionsType =\r\n// | ReturnType<typeof removeTaskAC>\r\n// | ReturnType<typeof addTaskAC>\r\n// | ReturnType<typeof updateTaskAC>\r\n// | AddTodolistActionType\r\n// | RemoveTodolistActionType\r\n// | SetTodolistsActionType\r\n// | ReturnType<typeof setTasksAC>\r\n\r\ntype ActionsType =\r\n// RemoveTaskACType\r\n    ReturnType<typeof actionTaskC.removeTaskAC>\r\n    | ReturnType<typeof actionTaskC.addTaskAC>\r\n    | ReturnType<typeof actionTaskC.updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof actionTaskC.setTasksAC>\r\n\r\n// | SetAllTasksActionType\r\n// | RemoveTasksActionType\r\n// | AddTasksActionType\r\nexport type TasksStateType = { [key: string]: Array<TaskType> }\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId]\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state};\r\n            const newTask = action.task\r\n            const tasks = stateCopy[newTask.todoListId]\r\n\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[newTask.todoListId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        // case \"CHANGE-TASK-STATUS\": {\r\n        //     let todolistTasks = state[action.todolistId];\r\n        //     state[action.todolistId] = todolistTasks\r\n        //         .map(t => t.id === action.taskId\r\n        //             ? {...t, status: 0}\r\n        //             : t);\r\n        //     return ({...state});\r\n        // }\r\n        // case \"CHANGE-TASK-TITLE\": {\r\n        //     let todolistTitle = state[action.todolistId];\r\n        //     state[action.todolistId] = todolistTitle\r\n        //         .map(t => t.id === action.id\r\n        //             ? {...t, title: action.title}\r\n        //             : t);\r\n        //     return ({...state});\r\n        // }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolist.id] = []\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state};\r\n            action.todolists.forEach((tl: any) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todoId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const actionTaskC = {\r\n    removeTaskAC: (taskId: string, todolistId: string) => {\r\n        return {type: 'REMOVE-TASK', taskId, todolistId} as const\r\n    },\r\n    addTaskAC: (task: TaskType) => {\r\n        return {type: 'ADD-TASK', task} as const\r\n    },\r\n    updateTaskAC: (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n        return {type: 'UPDATE-TASK', model, todolistId, taskId} as const\r\n    },\r\n    setTasksAC: (tasks: Array<TaskType>, todoId: string) => {\r\n        return {type: 'SET-TASKS', tasks, todoId} as const\r\n    }\r\n    // changeTaskStatusAC: (taskId: string, status: number, todolistId: string) => {\r\n    //     return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n    // },\r\n    // changeTaskTitleAC: (id: string, title: string, todolistId: string) => {\r\n    //     return {type: 'CHANGE-TASK-TITLE', id, title, todolistId}\r\n    // },\r\n\r\n}\r\n\r\nexport const fetchTasksTC = (todoId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        tasksAPI.getTasks(todoId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                dispatch(actionTaskC.setTasksAC(tasks, todoId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    tasksAPI.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n            const action = actionTaskC.removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    tasksAPI.createTask(title, todolistId )\r\n        .then(res => {\r\n            const task = res.data.data.item\r\n            const action = actionTaskC.addTaskAC(task)\r\n            dispatch(action)\r\n        })\r\n}\r\n//\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = actionTaskC.updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {todolistsAPI, TodoListType} from \"../api/api\";\r\n\r\n// type ActionType = {\r\n//     type: string\r\n//     [key: string]: any\r\n// }\r\n// export enum ACTIONS_TYPE {\r\n// const REMOVE_TODOLIST = 'REMOVE-TODOLIST';\r\n// const CHANGE_TODOLIST_FILTER = 'CHANGE-TODOLIST-FILTER';\r\n// const ADD_TODOLIST = 'ADD-TODOLIST';\r\n// const CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE';\r\n// const SET_TODOLISTS = 'SET-TODOLISTS';\r\n// }\r\n\r\n// export type RemoveTodolistActionType = {\r\n//     type: 'REMOVE-TODOLIST'\r\n//     id: string\r\n// }\r\n// export type AddTodolistActionType = {\r\n//     type: 'ADD-TODOLIST'\r\n//     title: string\r\n//     todolistId: string\r\n// }\r\n// export type ChangeTodolistTitleActionType = {\r\n//     type: 'CHANGE-TODOLIST-TITLE'\r\n//     id: string\r\n//     title: string\r\n// }\r\n// export type ChangeTodolistFilterActionType = {\r\n//     type: 'CHANGE-TODOLIST-FILTER'\r\n//     id: string\r\n//     order: number\r\n// }\r\n// export type SetTodolistsActionType = {\r\n//     type: 'SET-TODOLISTS'\r\n//     todolists: Array<TodoListType>\r\n// }\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof actionTodoC.changeTodolistTitleAC>\r\n    | ReturnType<typeof actionTodoC.changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof actionTodoC.addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof actionTodoC.removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof actionTodoC.setTodolistsAC>;\r\nexport type FilterValueType = \"all\" | \"completed\" | \"active\"\r\nexport type TodolistDomainType = TodoListType & {\r\n    filter: FilterValueType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state:Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map((tl: any) => {\r\n                return {\r\n                    ...tl,\r\n                    filter: \"all\"\r\n                }\r\n            })\r\n        }\r\n        default:\r\n            return [...state]\r\n    }\r\n}\r\n\r\nexport const actionTodoC = {\r\n    changeTodolistFilterAC: (id: string, filter: FilterValueType) => ({\r\n        type: 'CHANGE-TODOLIST-FILTER', id, filter: filter\r\n    } as const),\r\n    changeTodolistTitleAC: (id: string, title: string) => ({\r\n        type: 'CHANGE-TODOLIST-TITLE', id, title\r\n    } as const),\r\n    addTodolistAC : (todolist: TodoListType) => ({\r\n        type: 'ADD-TODOLIST', todolist} as const),\r\n    removeTodolistAC: (id: string) => ({\r\n        type: 'REMOVE-TODOLIST', id\r\n    } as const),\r\n    setTodolistsAC: (todolists: Array<TodoListType>) => ({\r\n        type: 'SET-TODOLISTS', todolists\r\n    } as const)\r\n}\r\n\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    //1. server request\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.getTodoLists()\r\n            .then((res) => {\r\n                //2. dispatch action (thunk)\r\n                dispatch(actionTodoC.setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.deleteTodoList(todolistId)\r\n            .then((res) => {\r\n                dispatch(actionTodoC.removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.createTodoList(title)\r\n            .then((res) => {\r\n                dispatch(actionTodoC.addTodolistAC(res.data.data.item))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodoList(id, title)\r\n            .then((res) => {\r\n                dispatch(actionTodoC.changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}","\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from \"./tasks-reduser\";\r\nimport {todolistsReducer} from \"./todolists-reduser\";\r\nimport thunk from 'redux-thunk'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, TextField, IconButton} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, todolistId:string) => void\r\n};\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    // console.log(\"AddItemForm is called\")\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    let changeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    let onKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (event.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    let addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   onChange={changeInputHandler}\r\n                   onKeyPress={onKeyPress}\r\n                   variant='outlined'\r\n                   error={!!error}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        {/*<Button variant='contained' color='primary' onClick={addTask}>+*/}\r\n        {/*</Button>*/}\r\n        <IconButton color='primary' onClick={addTask}><AddBox/></IconButton>\r\n        {/*{error && <div className=\"error-message\">{error}</div>}*/}\r\n    </div>\r\n})","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string,\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitleHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField value={title} autoFocus\r\n                       onBlur={activateViewMode}\r\n                       onChange={changeTitleHandler}/>\r\n            : <span\r\n                onDoubleClick={activateEditMode}\r\n            >\r\n                {props.value}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/api\";\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status\r\n        === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox color='primary' checked={props.task.status === TaskStatuses.Completed}\r\n                  onChange={onChangeHandler}/>\r\n        <EditableSpan value={props.task.title} onChange={onChangeTitleHandler}/>\r\n        <IconButton onClick={onClickHandler}><Delete style={{\r\n            \"width\": \"20px\",\r\n            \"height\": \"20px\"\r\n        }}/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Task} from \"./Task\";\r\nimport {FilterValueType, TodolistDomainType} from \"./state/todolists-reduser\";\r\nimport {fetchTasksTC} from \"./state/tasks-reduser\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses, TaskType} from \"./api/api\";\r\n\r\ntype TodoListPropsType = {\r\n    // id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    // changeFilter: (value: FilterValueType, todolistId: string,) => void\r\n    changeFilter: (id: string, filter: FilterValueType) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (idTask: string, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    // filter: FilterValueType\r\n    todolistId: string\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const TodoList = React.memo(function (props: TodoListPropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const todoId = props.todolistId\r\n        dispatch(fetchTasksTC(todoId))\r\n    }, []);\r\n    console.log('todolist call')\r\n\r\n    //было\r\n    // const addTask = (title: string) => {\r\n    //     props.addTask(title, props.id)\r\n    // }\r\n    //Стало\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolistId)\r\n    }, [props.addTask, props.todolistId]);\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.todolistId)\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolistId, title)\r\n    }, [props.todolistId, props.changeTodolistTitle]);\r\n\r\n    const onAllClickHandler = useCallback(() =>  {props.changeFilter(props.todolistId, \"all\")}, [props.todolistId, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => {props.changeFilter(props.todolistId, \"active\")}, [props.todolistId, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => {props.changeFilter(props.todolistId, \"completed\",)}, [props.changeFilter, props.todolistId])\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    console.log(tasksForTodolist)\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n\r\n                <IconButton style={{\r\n                    \"padding\": \"0\"\r\n                }} onClick={removeTodolist}>\r\n                    <Delete style={{\r\n                        \"width\": \"20px\",\r\n                        \"height\": \"20px\"\r\n                    }}/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {tasksForTodolist.map(t => <Task\r\n                        task={t}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        todolistId={props.todolistId}\r\n                        key={t.id}\r\n                    />\r\n                )}\r\n            </div>\r\n            <div>\r\n                <Button variant={props.todolist.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                        onClick={onAllClickHandler}\r\n                        color='default'\r\n                >All\r\n                </Button>\r\n                <Button variant={props.todolist.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                        onClick={onActiveClickHandler}\r\n                        color='primary'\r\n                >Active\r\n                </Button>\r\n                <Button variant={props.todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}\r\n                        color='secondary'\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Toolbar, IconButton, AppBar, Typography, Button, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    actionTodoC, addTodolistTC, fetchTodolistsTC, FilterValueType, TodolistDomainType\r\n\r\n} from \"./state/todolists-reduser\";\r\nimport {\r\n    actionTaskC, addTaskTC, removeTaskTC, TasksStateType, updateTaskTC\r\n} from \"./state/tasks-reduser\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses} from \"./api/api\";\r\n\r\n\r\n// export type TodoListType = {\r\n//     id: string,\r\n//     title: string,\r\n//     filter: FilterValueType\r\n// }\r\n\r\n\r\nfunction App() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, []);\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        dispatch(removeTaskTC(taskId, todolistId))\r\n        // const thunk = actionTaskC.removeTaskAC(taskId, todolistId)\r\n        // dispatch(thunk)\r\n    }, []);\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(title, todolistId))\r\n        // const action = addTaskAC(title, todolistId)\r\n        // dispatch(action)\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n        // const action = actionTodoC.addTodolistAC(title, todolistId)\r\n        // dispatch(action)\r\n    }, []);\r\n\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = actionTodoC.removeTodolistAC(id)\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, newTitle: string) {\r\n        const action = actionTodoC.changeTodolistTitleAC(id, newTitle)\r\n        dispatch(action)\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback(function (id: string, filter: FilterValueType) {\r\n        const action = actionTodoC.changeTodolistFilterAC(id, filter)\r\n        dispatch(action)\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n        // dispatch(updateTaskStatusTC(taskId, status, todolistId))\r\n        // }, []);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        updateTaskTC(taskId, {title: newTitle}, todolistId)\r\n        // const action = actionTaskC.changeTaskTitleAC(taskId, newTitle, todolistId)\r\n        // dispatch(action)\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position='static'>\r\n                <Toolbar>\r\n                    <IconButton edge='start' color='inherit' arial-label='menu'>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant='h6'>\r\n                        News\r\n                    </Typography>\r\n                    <Button color='inherit'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(tl => {\r\n                        const allTodolistTasks = tasks[tl.id];\r\n                        const tasksForTodolist = allTodolistTasks;\r\n\r\n                        return <Grid item key={tl.id + tl.title}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <TodoList\r\n                                    todolist={tl}\r\n                                    key={tl.id}\r\n                                    todolistId={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForTodolist}\r\n                                    removeTask={removeTask}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import AppWithReducers from \"./AppWithReducers\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}